basePath: /v2
definitions:
  articledto.ArticleAuthor:
    properties:
      author_id:
        type: integer
      bio:
        type: string
      following:
        type: boolean
      profile_image:
        type: string
      username:
        type: string
    type: object
  articledto.CreateArticleLikeResponseDTO:
    properties:
      article_id:
        type: integer
      author:
        $ref: '#/definitions/articledto.ArticleAuthor'
      body:
        type: string
      created_at:
        type: string
      description:
        type: string
      favorite_count:
        type: integer
      is_favorited:
        type: boolean
      tag_list:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  articledto.CreateArticleRequestDTO:
    properties:
      body:
        type: string
      description:
        type: string
      tag_list:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  articledto.CreateArticleResponseDTO:
    properties:
      article_id:
        type: integer
      author:
        $ref: '#/definitions/articledto.ArticleAuthor'
      body:
        type: string
      created_at:
        type: string
      description:
        type: string
      favorite_count:
        type: integer
      is_favorited:
        type: boolean
      tag_list:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  articledto.CreateArticleResponseWrapperDTO:
    properties:
      article:
        $ref: '#/definitions/articledto.CreateArticleResponseDTO'
    type: object
  articledto.ReadArticleByOffsetResponseWrapperDTO:
    properties:
      articles:
        items:
          $ref: '#/definitions/articledto.ReadArticleResponseDTO'
        type: array
    type: object
  articledto.ReadArticleResponseDTO:
    properties:
      article_id:
        type: integer
      author:
        $ref: '#/definitions/articledto.ArticleAuthor'
      body:
        type: string
      created_at:
        type: string
      description:
        type: string
      favorite_count:
        type: integer
      is_favorited:
        type: boolean
      tag_list:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  articledto.ReadArticleResponseWrapperDTO:
    properties:
      article:
        $ref: '#/definitions/articledto.ReadArticleResponseDTO'
    type: object
  articledto.ReadArticlesByUserResponseWrapperDTO:
    properties:
      articles:
        items:
          $ref: '#/definitions/articledto.ReadArticleResponseDTO'
        type: array
    type: object
  articledto.UpdateArticleRequestDTO:
    properties:
      body:
        type: string
      description:
        type: string
      tag_list:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  articledto.UpdateArticleResponseDTO:
    properties:
      article_id:
        type: integer
      author:
        $ref: '#/definitions/articledto.ArticleAuthor'
      body:
        type: string
      created_at:
        type: string
      description:
        type: string
      favorite_count:
        type: integer
      is_favorited:
        type: boolean
      tag_list:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  articledto.UpdateArticleResponseWrapperDTO:
    properties:
      article:
        $ref: '#/definitions/articledto.UpdateArticleResponseDTO'
    type: object
  authdto.RefreshTokenResponseDTO:
    properties:
      token:
        type: string
    type: object
  authdto.SignInRequestDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  authdto.SignInResponseDTO:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  authdto.SignInResponseWrapperDTO:
    properties:
      user:
        $ref: '#/definitions/authdto.SignInResponseDTO'
    type: object
  authdto.SignUpRequestDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  authdto.SignUpResponseDTO:
    properties:
      email:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  authdto.SignUpResponseWrapperDTO:
    properties:
      user:
        $ref: '#/definitions/authdto.SignUpResponseDTO'
    type: object
  authdto.VerifyEmailRequestDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  authdto.VerifyEmailResponseDTO:
    properties:
      email:
        type: string
    type: object
  authdto.VerifyUsernameRequestDTO:
    properties:
      username:
        type: string
    required:
    - username
    type: object
  authdto.VerifyUsernameResponseDTO:
    properties:
      username:
        type: string
    type: object
  commentdto.CommentAuthor:
    properties:
      author_id:
        type: integer
      bio:
        type: string
      profile_image:
        type: string
      username:
        type: string
    type: object
  commentdto.CreateCommentRequestDTO:
    properties:
      body:
        type: string
    type: object
  commentdto.CreateCommentResponseDTO:
    properties:
      author:
        $ref: '#/definitions/commentdto.CommentAuthor'
      body:
        type: string
      comment_id:
        type: integer
      created_at:
        type: string
    type: object
  commentdto.ReadCommentsResponseDTO:
    properties:
      author:
        $ref: '#/definitions/commentdto.CommentAuthor'
      body:
        type: string
      comment_id:
        type: integer
      created_at:
        type: string
      updated_at:
        type: string
    type: object
  commentdto.ReadCommentsResponseWrapperDTO:
    properties:
      comments:
        items:
          $ref: '#/definitions/commentdto.ReadCommentsResponseDTO'
        type: array
    type: object
  commentdto.UpdateCommentRequestDTO:
    properties:
      body:
        type: string
    type: object
  commentdto.UpdateCommentResponseDTO:
    properties:
      author:
        $ref: '#/definitions/commentdto.CommentAuthor'
      body:
        type: string
      comment_id:
        type: integer
      created_at:
        type: string
      updated_at:
        type: string
    type: object
  followdto.CreateFollowResponseDTO:
    properties:
      bio:
        type: string
      following:
        type: boolean
      profile_image:
        type: string
      username:
        type: string
    type: object
  followdto.CreateFollowResponseWrapperDTO:
    properties:
      user:
        $ref: '#/definitions/followdto.CreateFollowResponseDTO'
    type: object
  followdto.DeleteFollowResponseDTO:
    properties:
      bio:
        type: string
      following:
        type: boolean
      profile_image:
        type: string
      username:
        type: string
    type: object
  followdto.DeleteFollowResponseWrapperDTO:
    properties:
      user:
        $ref: '#/definitions/followdto.DeleteFollowResponseDTO'
    type: object
  types.ErrorDetail:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  types.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/types.ErrorDetail'
    type: object
  userdto.ReadMyProfileResponseDTO:
    properties:
      bio:
        type: string
      profile_image:
        type: string
      username:
        type: string
    type: object
  userdto.ReadUserProfileResponseDTO:
    properties:
      bio:
        type: string
      following:
        type: boolean
      profile_image:
        type: string
      username:
        type: string
    type: object
  userdto.ReadUserProfileResponseWrapperDTO:
    properties:
      user:
        $ref: '#/definitions/userdto.ReadUserProfileResponseDTO'
    type: object
  userdto.UpdateUserProfileRequestDTO:
    properties:
      bio:
        type: string
      email:
        type: string
      password:
        type: string
      profile_image:
        type: string
      username:
        type: string
    type: object
  userdto.UpdateUserProfileResponseDTO:
    properties:
      bio:
        type: string
      profile_image:
        type: string
      username:
        type: string
    type: object
  userdto.UpdateUserProfileResponseWrapperDTO:
    properties:
      user:
        $ref: '#/definitions/userdto.UpdateUserProfileResponseDTO'
    type: object
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /article/{article_id}:
    delete:
      consumes:
      - application/json
      description: Delete article
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: article id(기사 ID)
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: success
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Delete article
      tags:
      - Article tag
    put:
      consumes:
      - application/json
      description: Update article
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: article id(기사 ID)
        in: path
        name: article_id
        required: true
        type: integer
      - description: updateArticleReq
        in: body
        name: updateArticleReq
        required: true
        schema:
          $ref: '#/definitions/articledto.UpdateArticleRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/articledto.UpdateArticleResponseWrapperDTO'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update article
      tags:
      - Article tag
  /articles:
    get:
      consumes:
      - application/json
      description: page, limit을 이용해서 article을 읽어옴(limit는 없는 경우 10으로 사용)
      parameters:
      - description: 로그인 한 경우, 토큰 전달(토큰이 없는 경우(로그아웃) 에러가 발생하지 않음)
        in: header
        name: authorization
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/articledto.ReadArticleByOffsetResponseWrapperDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Read article by offset
      tags:
      - Article tag
  /articles/tag:
    get:
      consumes:
      - application/json
      description: tag를 이용해서 article을 읽어옴
      parameters:
      - description: 로그인 한 경우, 토큰 전달(토큰이 없는 경우(로그아웃) 에러가 발생하지 않음)
        in: header
        name: authorization
        type: string
      - description: tag
        in: query
        name: tag
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/articledto.ReadArticleByOffsetResponseWrapperDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Read article by tag
      tags:
      - Article tag
  /my/articles:
    get:
      consumes:
      - application/json
      description: page, limit을 이용해서 내가 작성한 article을 읽어옴(limit는 없는 경우 10으로 사용)
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/articledto.ReadArticleByOffsetResponseWrapperDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Read my article by offset
      tags:
      - Article tag
  /my/profile:
    get:
      consumes:
      - application/json
      description: 내 프로필 조회
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/userdto.ReadMyProfileResponseDTO'
        "404":
          description: user 정보가 없는 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 내 프로필 조회
      tags:
      - Profile tag
    put:
      consumes:
      - application/json
      description: Update user profile
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: updateUserProfileReq
        in: body
        name: updateUserProfileReq
        required: true
        schema:
          $ref: '#/definitions/userdto.UpdateUserProfileRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/userdto.UpdateUserProfileResponseWrapperDTO'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update user profile
      tags:
      - Profile tag
  /token-refresh:
    get:
      consumes:
      - application/json
      description: 토큰 갱신
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/authdto.RefreshTokenResponseDTO'
        "400":
          description: 토큰이 없는 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 토큰 갱신
      tags:
      - Auth tag
  /user/{author_id}/article/{article_id}:
    get:
      consumes:
      - application/json
      description: Read article by id
      parameters:
      - description: 로그인 한 경우, 토큰 전달(토큰이 없는 경우(로그아웃) 에러가 발생하지 않음)
        in: header
        name: authorization
        type: string
      - description: article author id(기사 소유자)
        in: path
        name: user_id
        required: true
        type: integer
      - description: article id(기사 ID)
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/articledto.ReadArticleResponseWrapperDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: 기사를 찾을 수 없음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Read article by id
      tags:
      - Article tag
  /user/{author_id}/article/{article_id}/comment:
    post:
      consumes:
      - application/json
      description: 댓글을 생성합니다.
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: article author id(기사 소유자)
        in: path
        name: author_id
        required: true
        type: integer
      - description: article id(기사 ID)
        in: path
        name: article_id
        required: true
        type: integer
      - description: 댓글 내용
        in: body
        name: createCommentReq
        required: true
        schema:
          $ref: '#/definitions/commentdto.CreateCommentRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/commentdto.CreateCommentResponseDTO'
        "400":
          description: 잘못된 값을 요청한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 처리하지 못한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 댓글 생성
      tags:
      - Comment tag
  /user/{author_id}/article/{article_id}/comment/{comment_id}:
    delete:
      consumes:
      - application/json
      description: 댓글을 삭제합니다.
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: article author id(기사 소유자)
        in: path
        name: author_id
        required: true
        type: integer
      - description: article id(기사 ID)
        in: path
        name: article_id
        required: true
        type: integer
      - description: comment id(댓글 ID)
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 정상적으로 삭제됨
          schema:
            type: string
        "400":
          description: 잘못된 값을 요청한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 댓글 삭제
      tags:
      - Comment tag
  /user/{author_id}/article/{article_id}/comments:
    get:
      consumes:
      - application/json
      description: 기사의 댓글 목록을 조회합니다.
      parameters:
      - description: article author id(기사 소유자)
        in: path
        name: author_id
        required: true
        type: integer
      - description: article id(기사 ID)
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commentdto.ReadCommentsResponseWrapperDTO'
        "400":
          description: 잘못된 값을 요청한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 댓글 목록 조회
      tags:
      - Comment tag
  /user/{author_id}/article/{article_id}/like:
    post:
      consumes:
      - application/json
      description: Article like
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: article 작성자 ID
        in: path
        name: author_id
        required: true
        type: integer
      - description: article id
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 이미 좋아요한 경우(좋아요 처리)
          schema:
            $ref: '#/definitions/articledto.CreateArticleLikeResponseDTO'
        "201":
          description: '좋아요 성공 '
          schema:
            $ref: '#/definitions/articledto.CreateArticleLikeResponseDTO'
        "400":
          description: user_id, article id가 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: 기사를 찾지 못한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Article like
      tags:
      - Article tag
  /user/{author_id}/articles:
    get:
      consumes:
      - application/json
      description: 유저가 작성한 article 조회
      parameters:
      - description: jwt token
        in: header
        name: authorization
        type: string
      - description: article 작성자 ID
        in: path
        name: author_id
        required: true
        type: integer
      - description: page number
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/articledto.ReadArticlesByUserResponseWrapperDTO'
        "400":
          description: user_id가 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 유저가 작성한 article 조회
      tags:
      - Article tag
  /user/{user_id}/article:
    post:
      consumes:
      - application/json
      description: 기사를 생성합니다.
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: 기사 생성 내용
        in: body
        name: createArticleReq
        required: true
        schema:
          $ref: '#/definitions/articledto.CreateArticleRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: 정상적으로 생성됨
          schema:
            $ref: '#/definitions/articledto.CreateArticleResponseWrapperDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 제대로 수행하지 못함
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 기사 생성
      tags:
      - Article tag
  /user/{user_id}/article/{article_id}/comment/{comment_id}:
    put:
      consumes:
      - application/json
      description: 댓글을 수정합니다.
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: article author id(기사 소유자)
        in: path
        name: author_id
        required: true
        type: integer
      - description: article id(기사 ID)
        in: path
        name: article_id
        required: true
        type: integer
      - description: comment id(댓글 ID)
        in: path
        name: comment_id
        required: true
        type: integer
      - description: updateCommentReq
        in: body
        name: updateCommentReq
        required: true
        schema:
          $ref: '#/definitions/commentdto.UpdateCommentRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/commentdto.UpdateCommentResponseDTO'
        "400":
          description: 잘못된 값을 요청한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 요청을 처리하지 못한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: 네트워크 에러
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 댓글 수정
      tags:
      - Comment tag
  /user/{user_id}/article/{article_id}/like:
    delete:
      consumes:
      - application/json
      description: Article unlike
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: article 작성자 ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: article id
        in: path
        name: article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: success
        "400":
          description: user_id, article id가 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: 기사를 찾지 못한 경우
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Article unlike
      tags:
      - Article tag
  /user/{user_id}/profile:
    get:
      consumes:
      - application/json
      description: Read user profile
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: integer
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/userdto.ReadUserProfileResponseWrapperDTO'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Read user profile
      tags:
      - Profile tag
  /user/follow/{followed_id}:
    delete:
      consumes:
      - application/json
      description: Unfollow user
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: 언팔로우할 user id
        in: path
        name: followed_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 언팔로우한 유저 정보
          schema:
            $ref: '#/definitions/followdto.DeleteFollowResponseWrapperDTO'
        "400":
          description: followed id가 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: 언팔로우할 유저가 존재하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Unfollow user
      tags:
      - Follow tag
    post:
      consumes:
      - application/json
      description: Follow user
      parameters:
      - description: jwt token
        in: header
        name: authorization
        required: true
        type: string
      - description: 팔로우할 user id
        in: path
        name: followed_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 이미 팔로우가 되어 있는 경우
          schema:
            $ref: '#/definitions/followdto.CreateFollowResponseWrapperDTO'
        "201":
          description: 팔로우한 유저 정보
          schema:
            $ref: '#/definitions/followdto.CreateFollowResponseWrapperDTO'
        "400":
          description: followed id가 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: 팔로울 할 유저가 존재하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Follow user
      tags:
      - Follow tag
  /user/signin:
    post:
      consumes:
      - application/json
      description: 로그인
      parameters:
      - description: signInReq
        in: body
        name: signInReq
        required: true
        schema:
          $ref: '#/definitions/authdto.SignInRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 로그인 성공
          schema:
            $ref: '#/definitions/authdto.SignInResponseWrapperDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 유저가 존재하지 않거나 비밀번호가 틀림
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 로그인
      tags:
      - Auth tag
  /user/signup:
    post:
      consumes:
      - application/json
      description: 회원가입
      parameters:
      - description: signUpReq
        in: body
        name: signUpReq
        required: true
        schema:
          $ref: '#/definitions/authdto.SignUpRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: success
          schema:
            $ref: '#/definitions/authdto.SignUpResponseWrapperDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: 이미 존재하는 계정
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 회원가입
      tags:
      - Auth tag
  /user/verify-email:
    post:
      consumes:
      - application/json
      description: 이메일 중복 확인
      parameters:
      - description: verifyEmailReq
        in: body
        name: verifyEmailReq
        required: true
        schema:
          $ref: '#/definitions/authdto.VerifyEmailRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/authdto.VerifyEmailResponseDTO'
        "400":
          description: 입력값이 유효하지 않거나 이메일 형식이 아님
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: 이미 존재하는 email
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 이메일 중복 확인
      tags:
      - Auth tag
  /user/verify-username:
    post:
      consumes:
      - application/json
      description: 유저네임 중복 확인
      parameters:
      - description: verifyUsernameReq
        in: body
        name: verifyUsernameReq
        required: true
        schema:
          $ref: '#/definitions/authdto.VerifyUsernameRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/authdto.VerifyUsernameResponseDTO'
        "400":
          description: 입력값이 유효하지 않음
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: 이미 존재하는 username
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: network error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: 유저네임 중복 확인
      tags:
      - Auth tag
swagger: "2.0"
